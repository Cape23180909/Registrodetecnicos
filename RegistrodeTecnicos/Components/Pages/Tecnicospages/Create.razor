@page "/Tecnico/create"
@inject TecnicoService tecnicoService
@inject TiposTecnicoService tipoTecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registro de T&eacute;cnicos</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />

    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de T&eacute;cnicos</h3>
        </div>

        <div class="card-body">
            <!-- TecnicoId -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TecnicoId" class="form-label">T&eacute;cnicoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="tecnico.TecnicoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                        <ValidationMessage For="@(() => tecnico.TecnicoId)" />
                    </div>
                </div>
            </div>

            <!-- Tipo tecnico -->
            <div class="mb-3">
                <label> Tipo de T&eacute;cnico </label>
                <InputSelect @bind-Value="tecnico.TipoId" class="form-select">
                    <option value="0">Elija un tipo de tecnico</option>
                    @foreach (var tipo in tipos)
                    {
                        <option value="@tipo.TipoId">@tipo.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => tecnico.Sueldohora)" />
            </div>

            <!-- Nombres -->
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombre:</label>
                <InputText @bind-Value="tecnico.Nombre" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Nombre)" />
                @if (Existe)
                {
                    <p class="text-danger">Ya existe una persona que tiene este nombre.</p>
                }
            </div>

            <!-- SueldoHora -->
            <div class="mb-3">
                <label> SueldoHora </label>
                <InputNumber @bind-Value="tecnico.Sueldohora" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Sueldohora)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">

                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span> Retroceder </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    List<ToastMessage> MensajeToast = new List<ToastMessage>();
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> tipos = new List<TiposTecnicos>();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        tipos = await tipoTecnicoService.Listar(t => true);
    }

    public async Task Nuevo()
    {
        tecnico = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoService.Buscar(tecnico.TecnicoId);

        if (tecnicoEncontrado != null)
        {
            tecnico = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardo = await tecnicoService.Guardar(tecnico);
        if (guardo)
        {
            Mensaje(ToastType.Success, "El tecnico se a guardado con exito");
            Nuevo();
        }
    }

    private async Task Retroceder()
    {
        navigationManager.NavigateTo("/Tecnico/index");
    }

    public async Task<bool> Validar()
    {
        Existe = await tecnicoService.Existe(tecnico.TecnicoId, tecnico.Nombre);
        return !Existe;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private async Task Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }
}
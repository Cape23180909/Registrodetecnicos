@page "/Create4"
@page "/Tecnico/Create/{TecnicoId:int}"
@inject TecnicoServies tecnicoServies
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="tecnicos" OnInvalidSubmit="Guardar" OnSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar técnico</h3>
        </div>
        <div class="card-body">
            <!-- Resto del formulario -->
        </div>
        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a href="/Prioridad/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public Tecnicos tecnicos { get; set; } = new Tecnicos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (TecnicoId != 0)
        {
            await Buscar();
        }
    }

    public void Nuevo()
    {
        tecnicos = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoServies.Buscar(TecnicoId);

        if (tecnicoEncontrado != null)
        {
            tecnicos = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public bool Validar()
    {
        Existe = tecnicoServies.Listar(pr => pr.Nombre!.ToLower() == tecnicos.Nombre!.ToLower()
                    && pr.TecnicoId != tecnicos.TecnicoId).Any();
        return Existe;
    }

    public async Task Guardar()
    {
        if (Validar())
        {
            return;
        }

        var guardo = await tecnicoServies.Guardar(tecnicos);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await tecnicoServies.Eliminar(tecnicos.TecnicoId);
        Nuevo();
    }
}
